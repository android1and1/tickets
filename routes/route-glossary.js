// Generated by CoffeeScript 2.3.1
(function() {
  var db, definitions, express, getFields, glossaryFactory, router, sqlite;

  express = require('express');

  router = new express.Router;

  ({definitions, getFields} = require('../modules/md-glossary.js'));

  sqlite = require('sqlite3');

  sqlite.verbose();

  db = new sqlite.Database('sqlitedb/sqlite.sql', function() {
    return db.run(definitions);
  });

  db.on('error', function(err) {
    return console.log('::debug info::', err);
  });

  // list
  router.get('/', function(req, res, next) {
    // list top10
    return db.serialize(function() {
      return db.all('select * from glossary limit 10', function(err, arr) {
        if ((arr.length === 0) || err) {
          return res.render('glossary/not-ready.pug', {
            title: 'top10 list',
            error: 'database error or empty list.'
          });
        } else {
          return res.render('glossary/index.pug', {
            title: 'top10 list',
            top10: arr
          });
        }
      });
    });
  });

  router.post('/search', function(req, res, next) {
    var keyword;
    // client send ajax data {term:'keyword'}
    keyword = req.body.term;
    // keyword should be validate,because client page js will check it already.
    return db.get('select * from glossary where term = ?', keyword, function(err, item) {
      return res.json({
        'detail': item,
        'servertime': new Date
      });
    });
  });

  router.get('/response', function(req, res, next) {
    return res.render('glossary/response.pug');
  });

  router.get('/add', function(req, res, next) {
    var fields;
    // Notice That,this is dynamiclly created form.
    fields = getFields();
    return res.render('glossary/add.pug', {
      fields: fields
    });
  });

  router.post('/delete', function(req, res, next) {
    var id;
    id = req.body.id;
    console.log('id==', id);
    return db.run('delete from glossary where id= ?', id, function(err) {
      if (err) {
        return res.json({
          status: 'delete failed.'
        });
      } else {
        return res.json({
          status: 'item(id=' + id + ') has deleted.'
        });
      }
    });
  });

  router.get('/update/:id', function(req, res, next) {
    return db.get('select * from glossary where id = ?', req.params.id, function(err, item) {
      if (err) {
        return res.send('database error while doing select query.');
      } else if (item === void 0) {
        return res.render('glossary/no-this-item.pug', {
          title: 'detail page'
        });
      } else {
        return res.render('glossary/item.pug', {
          title: 'detail page',
          item: item,
          fields: getFields()
        });
      }
    });
  });

  router.post('/updated', function(req, res, next) {});

  router.post('/add', function(req, res, next) {
    var body;
    body = req.body;
    return db.serialize(function() {
      var stmt;
      stmt = db.prepare('insert into glossary (term,about,article,visits,last_visited) values (?,?,?,?,?)');
      stmt.bind(body.term, body.about, body.article, body.visits, body.last_visited);
      return stmt.run(function(err) {
        if (err) {
          console.log(':debug:router:glossary:', err.message);
          return res.send('has db error whild storing.');
        } else {
          return stmt.finalize(function() {
            return res.redirect('/glossary/response');
          });
        }
      });
    });
  });

  router.post('/update/:id', function(req, res, next) {
    var body;
    body = req.body;
    return db.serialize(function() {
      var stmt;
      stmt = db.prepare('update glossary set term=?,about=?,article=?,visits=?,last_visited=? where id=?');
      stmt.bind(body.term, body.about, body.article, body.visits, body.last_visited, req.params.id);
      return stmt.run(function(err) {
        if (err) {
          console.log(':debug:router:glossary:', err.message);
          return res.send('has db error while updating.');
        } else {
          return stmt.finalize(function() {
            return res.redirect('/glossary/response');
          });
        }
      });
    });
  });

  glossaryFactory = function(app) {
    return function(whichpath) {
      return app.use(whichpath, router);
    };
  };

  module.exports = glossaryFactory;

  /*
  this route map one table: "glossary",its definition at 'modules/md-glossary.js'
  written by a.d
  2018-12-12
*/

}).call(this);
