// Generated by CoffeeScript 2.3.1
(function() {
  // 2018-12-19 game is "5min=1app". 
  var client, express, neighborCarFactory, nohm, router, schema;

  express = require('express');

  router = express.Router();

  nohm = void 0;

  schema = void 0;

  client = (require('redis')).createClient();

  client.on('error', function(error) {
    return console.log('::debug info - route neighborCar::', error.message);
  });

  client.on('connect', function() {
    var md;
    md = require('../modules/md-neighborCar');
    nohm = (require('nohm')).Nohm;
    nohm.setPrefix('gaikai');
    nohm.setClient(this);
    return schema = nohm.register(md);
  });

  // till here,has 'global' variable - '' 
  router.get('/', function(req, res, next) {
    return res.redirect(302, '/neighborCar/list');
  });

  router.get('/list', async function(req, res, next) {
    var allids, allitems, i, ins, j, len;
    // top10 sorted by id number.
    allids = (await schema.sort({
      field: 'whatistime',
      direction: 'DESC',
      limit: [0, 10]
    }));
    allitems = [];
    for (j = 0, len = allids.length; j < len; j++) {
      i = allids[j];
      ins = (await nohm.factory('neighborCar', i));
      allitems.push(ins.allProperties());
    }
    return res.render('neighborCar/list.pug', {
      title: 'Top 10 List',
      top10: allitems
    });
  });

  router.post('/find-by/:index', async function(req, res, next) {
    var error, index, info, item, items, j, keyword, len, opts;
    // final,i need the architech like this:
    // from client,give server formdata {method:'find-by-vehicle-type',keyword:'yueye'}
    index = req.params.index;
    // we no need to check if index is undefined or null,because only our scripts can touch it.
    keyword = req.body.keyword;
    opts = {};
    opts[index] = keyword;
    info = [];
    try {
      items = (await schema.findAndLoad(opts));
      for (j = 0, len = items.length; j < len; j++) {
        item = items[j];
        info.push(item.allProperties());
      }
    } catch (error1) {
      error = error1;
      return res.json({
        'error': 'No This Index.'
      });
    }
    return res.render('neighborCar/results-list.pug', {
      list: info
    });
  });

  router.get('/update/:id', function(req, res, next) {
    return res.send('TODO,parse posted then response status.');
  });

  /*
  id = req.params.id
  res.json form: '<form method="POST" action=""  class="form-horizontal"><div class="form-group"><label for="seesee"> See That:</label><input class="text" name="seesee" id="seesee" /></div><button type="submit" class="btn btn-success"> Submit!</button></form>'

  */
  router.put('/vote/:id', async function(req, res, next) {
    var error, id, item, memo, num, old;
    id = req.params.id;
    try {
      item = (await nohm.factory('neighborCar', id));
      num = item.property('visits');
      num = parseInt(num);
      item.property('visits', num + 1);
      old = item.property('memo');
      memo = '<address><strong>';
      memo += new Date;
      memo += '</strong><br>';
      memo += 'has vote once.';
      memo += '<br></address>';
      item.property('memo', old + memo);
      await item.save();
      return res.json({
        status: 'visits number added once.'
      });
    } catch (error1) {
      error = error1;
      return res.json({
        error: 'occurs error during add visits number,reason:' + error.message
      });
    }
  });

  router.post('/find-by-brand', async function(req, res, next) {
    var brand, error, item, items, j, len, list;
    brand = req.body.keyword;
    list = [];
    try {
      items = (await schema.findAndLoad({
        'brand': brand
      }));
      for (j = 0, len = items.length; j < len; j++) {
        item = items[j];
        item.property('visits', '');
        await item.save();
        list.push(item.allProperties());
      }
    } catch (error1) {
      error = error1;
      return res.json({
        'error': 'No This Brand.'
      });
    }
    return res.render('neighborCar/results-list', {
      list: list
    });
  });

  router.get('/register-car', function(req, res, next) {
    return res.render('neighborCar/register-car.pug', {
      title: 'Register Car(Neighbors)'
    });
  });

  router.get('/update/:id', async function(req, res, next) {
    var id, item, properties;
    id = req.param.id;
    try {
      item = (await nohm.factory('neighborCar', id));
      properties = item.allProperties();
      return res.render('neighborCar/base-item-form.pug', {
        title: 'Update Car',
        properties: properties
      });
    } catch (error1) {}
  });

  router.get('/purge-db', function(req, res, next) {
    return res.render('neighborCar/purge-db.pug');
  });

  router.delete('/delete/:id', async function(req, res, next) {
    var error, id, item;
    id = req.params.id;
    try {
      item = (await nohm.factory('neighborCar', id));
      item.remove();
      return res.json({
        status: 'item -#' + item.id + ' has deleted.'
      });
    } catch (error1) {
      error = error1;
      return res.json({
        status: 'error about deleting.the item - ' + item.id + ' has NOT deleted.'
      });
    }
  });

  router.delete('/purge-db', async function(req, res, next) {
    var error;
    // quanteetee user from '/neighborCar/purge-db'(GET),click button.
    if (req.xhr) {
      try {
        await nohm.purgeDb(client);
      } catch (error1) {
        error = error1;
        return res.send('purge execution failed. all.');
      }
      return res.send('purge all itmes in db:wiki.');
    } else {
      return res.send('nosense!');
    }
  });

  // add!
  router.post('/register-car', async function(req, res, next) {
    var body, error, ins;
    ins = (await nohm.factory('neighborCar'));
    body = req.body;
    ins.property('visits', 1);
    ins.property({
      brand: body.brand,
      license_plate_number: body.license_plate_number,
      color: body.color,
      vehicle_model: body.vehicle_model,
      whatistime: Date.parse(new Date),
      where_seen: body.where_seen,
      memo: body.memo
    });
    try {
      await ins.save();
    } catch (error1) {
      error = error1;
      console.log(ins.errors);
      return res.send('save failed.');
    }
    return res.send('saved.');
  });

  neighborCarFactory = function(app) {
    return function(pathname) {
      return app.use(pathname, router);
    };
  };

  module.exports = neighborCarFactory;

}).call(this);
