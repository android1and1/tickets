// Generated by CoffeeScript 2.3.1
(function() {
  var express, formidable, fs, path, router, uploadingFactory;

  fs = require('fs');

  path = require('path');

  express = require('express');

  router = express.Router();

  formidable = require('formidable');

  router.get('/iphone-uploading', function(req, res, next) {
    return res.render('uploading/iphone-uploading');
  });

  router.post('/iphone-uploading', function(req, res, next) {
    var form, ifred;
    form = new formidable.IncomingForm;
    form.uploadDir = path.join(path.dirname(__dirname), 'tmp');
    form.multiples = true;
    ifred = false;
    form.on('file', function(name, file) {
      var abs, prefix, suffix;
      // abs is 'absolute path string'
      prefix = file.path.slice(0, file.path.lastIndexOf('/'));
      suffix = file.name;
      abs = path.join(prefix, suffix);
      return fs.rename(file.path, abs, function(err) {
        if (err) {
          throw new Error('rename event occurs error.');
        }
      });
    });
    return form.parse(req, function(err) {
      if (err) {
        return res.render('uploading/error.pug');
      } else {
        // 302 is default code.
        res.locals.bytesize = '10m';
        return res.redirect(302, '/uploading/successfully');
      }
    });
  });

  router.get('/successfully', function(req, res, next) {
    return res.render('uploading/successfully', {
      title: 'iphone-uploading-success'
    });
  });

  /*
  below route is for learning formidable's callback's struct.
  */
  router.use('/learn-formidable', function(req, res, next) {
    var form, info, uploadDir;
    // client page is the same route,method is get,server response if client request via post.
    if (req.method === 'GET') {
      return res.render('uploading/learn-formidable-client.pug');
    } else if (req.method === 'POST') {
      // initial Form
      form = new formidable.IncomingForm;
      // important:upload dir,if want handle file-uploading.
      uploadDir = __dirname; // absolute path,it is '<project-root>/routes/'
      uploadDir = path.dirname(__dirname); // shift it to '<project-root>/' 
      uploadDir = path.join(uploadDir, 'public', 'uploads'); // means <project-root>/public/uploads 
      form.uploadDir = uploadDir;
      // above 4 lines can combound to 1:  form.uploadDir = (path.dirname __dirname) + '/public/uploads'
      form.type = 'urlencoded'; // depending on client request.,waste this way.
      form.maxFieldsSize = 1024 * 1024; // default is 2M.
      form.maxFields = 10; // default is 1000.
      // need a collection(container)
      info = {};
      form.on('file', function(name, value) {
        var newone, oldone;
        // yong lai ce shi,ye shi ji hao de.2018-9-6
        // info['filefield_' + name] = value.name + '/' + value.path

        // now do:fs.rename
        oldone = value.path;
        newone = oldone.slice(0, (oldone.lastIndexOf('/')) + 1); // keep the '/' as suffix
        newone += value.name;
        return fs.renameSync(oldone, newone);
      });
      form.on('field', function(name, value) {
        // dont writes as info.name = value(my first time)
        // info.name will saved the "value" in {name:"value"},so:
        // only the latest field saved.
        return info[name] = value;
      });
      form.on('end', function(err) {
        if (err) {
          throw new Error('occurs parsering error.');
        } else {
          return res.render('uploading/learn-formidable-server.pug', {
            'info': info
          });
        }
      });
      return form.parse(req);
    } else {
      return res.send('we dont handle request excepts "POST" and "GET".');
    }
  });

  uploadingFactory = function(app) {
    return function(pathname) {
      return app.use(pathname, router);
    };
  };

  //module.exports = router
  module.exports = uploadingFactory;

}).call(this);
