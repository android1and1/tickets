// Generated by CoffeeScript 2.3.1
(function() {
  var Nohm, RT, Redis, express, fs, nohm1, nohm2, path, pug, rjFactory, router;

  fs = require('fs');

  pug = require('pug');

  path = require('path');

  express = require('express');

  router = express.Router();

  //formidable = require 'formidable'
  Redis = require('redis');

  RT = require('../modules/md-readingjournals');

  // for debug target
  Nohm = require('nohm');

  // client not to connect this time.
  [nohm1, nohm2] = [Nohm.Nohm, Nohm.Nohm];

  [nohm1, nohm2].forEach(function(itisnohm) {
    var redis;
    // now we have 2 redis clients.
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-readingjournals::', err.message);
    });
    return redis.on('connect', function() {
      itisnohm.setClient(redis);
      // another route - /neighborCar use redis-server,so,they should in same name space:'gaikai'
      return itisnohm.setPrefix('gaikai');
    });
  });

  router.get('/', async function(req, res, next) {
    var allids, allitems, alljournals, i, item, len, schema;
    schema = nohm1.register(RT);
    // top10
    allids = (await schema.sort({
      'field': 'visits',
      'direction': 'DESC',
      'limit': [0, 10]
    }));
    allitems = (await schema.loadMany(allids));
    alljournals = [];
    for (i = 0, len = allitems.length; i < len; i++) {
      item = allitems[i];
      alljournals.push(item.allProperties());
    }
    return res.render('readingjournals/index', {
      title: 'App Title',
      'alljournals': alljournals
    });
  });

  router.get('/search-via-id/:id', async function(req, res, next) {
    var error, i, item, items, len, resultArray, schema;
    schema = ins.register(RT);
    try {
      items = (await schema.findAndLoad({
        timestamp: 1412121600000,
        visits: {
          min: 1,
          max: '+inf'
        }
      }));
      resultArray = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        resultArray.push(item.id + '#' + item.property('title'));
      }
      return res.json({
        results: resultArray
      });
    } catch (error1) {
      error = error1;
      return res.json({
        results: ''
      });
    }
  });

  router.post('/delete/:id', async function(req, res, next) {
    var error, schema, thisid, thisins;
    schema = nohm1.register(RT);
    // at a list page,each item has button named 'Delete It'
    thisid = req.params.id;
    try {
      thisins = (await schema.load(thisid));
      return thisins.remove().then(function() {
        return res.json({
          status: 'delete-ok'
        });
      });
    } catch (error1) {
      error = error1;
      return res.json({
        status: 'delete-error',
        error: error.message
      });
    }
  });

  router.get('/sample-mod2form', function(req, res, next) {
    var opts, snippet, url;
    opts = RT.definitions;
    url = 'http://www.fellow5.cn';
    snippet = pug.render(RT.mod2form(), {
      opts: opts,
      url: url
    });
    return res.render('readingjournals/tianna', {
      snippet: snippet
    });
  });

  // add 
  router.all('/add', async function(req, res, next) {
    var author, error, item, journal, opts, reading_history, schema, snippet, tag, timestamp, title, url, visits;
    if (req.method === 'POST') {
      schema = nohm2.register(RT);
      item = (await nohm2.factory(RT.modelName));
      ({title, author, visits, reading_history, tag, timestamp, journal} = req.body);
      // TODO check if value == '',let is abey default value defined in schema.
      if (visits !== '') {
        item.property('visits', visits);
      }
      if (tag !== '') {
        item.property('tag', tag);
      }
      if (timestamp !== '') {
        item.property('timestamp', timestamp);
      }
      if (reading_history !== '') {
        item.property('reading_history', reading_history);
      }
      item.property({
        title: title,
        author: author,
        journal: journal
      });
      try {
        await item.save({
          silence: true
        });
        return res.json({
          status: 'ok'
        });
      } catch (error1) {
        error = error1;
        if (error instanceof Nohm.ValidationError) {
          console.log('validation error during save().,reason is', error.errors);
        } else {
          console.log(error.message);
        }
        return res.json({
          status: 'error',
          reason: 'no save,check abouts.' // this case is method : 'GET'
        });
      }
    } else {
      opts = RT.definitions;
      url = '/reading-journals/add';
      snippet = pug.render(RT.mod2form(), {
        opts: opts,
        url: url
      });
      return res.render('readingjournals/add.pug', {
        snippet: snippet
      });
    }
  });

  rjFactory = function(app) {
    return function(pathname) {
      return app.use(pathname, router);
    };
  };

  module.exports = rjFactory;

}).call(this);
