// Generated by CoffeeScript 2.4.1
(function() {
  var agent, assert, cheerio, request;

  assert = require('assert');

  cheerio = require('cheerio');

  request = require('supertest');

  agent = request.agent('127.0.0.1:3003');

  describe('route /admin/dynamic-indexes::', function() {
    it('access successful if authenticate good::', function() {
      return agent.post('/admin/login').type('form').send({
        'alias': 'fengfeng2',
        'password': '1234567'
      }).expect(303);
    });
    describe('route GET /admin/dynamic-indexes?range=100::', function() {
      return it('after authentication,agent access this route should be ok::', function() {
        return agent.get('/admin/dynamic-indexes').expect('Content-Type', 'text/html; charset=utf-8').expect(200).then(function(res) {
          var $;
          $ = cheerio.load(res.text);
          // has head1 text is 'Range List' 
          assert.equal($('h1').text(), 'Range List');
          // because invalid range,server send no list,view display none
          return assert.equal($('.list-group').length, 0);
        });
      });
    });
    describe('if query is invalidString responses also has waringing:', function() {
      return it('get via query range=invalid should get warning::', function() {
        return agent.get('/admin/dynamic-indexes?range=invalid', function() {}).expect(200).then(function(res) {
          var $;
          $ = cheerio.load(res.text);
          // has .warning element in this DOM.
          return assert.equal(1, $('.warning').length);
        });
      });
    });
    return describe('route POST /admin/dynamic-indexes::', function() {
      return it('post the form will get response(json)::', function() {
        return agent.post('/admin/dynamic-indexes').type('form').send({
          start: 300,
          end: 550
        }).expect(200).then(function(res) {
          var $;
          // this time ,response titles will more than 200
          $ = cheerio.load(res.text);
          return assert.ok($('.list-group-item').length > 200);
        });
      });
    });
  });

}).call(this);
