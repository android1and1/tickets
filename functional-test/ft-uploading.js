// Generated by CoffeeScript 2.3.1
(function() {
  var Browser, app, browser, fs, http, server;

  Browser = require('zombie');

  Browser.localhost('example.com', 4140);

  browser = new Browser;

  app = require('../app');

  fs = require('fs');

  http = require('http');

  server = http.Server(app);

  server.listen(4140);

  server.on('error', function(err) {
    return console.error(err);
  });

  // sometimes it will help(below line),especially beaglebone and raspi
  browser.waitDuration = '30s';

  describe('route - "/uploading"::', function() {
    // need by raspberry pi,even version 2
    this.timeout(9140);
    after(function() {
      return server.close();
    });
    return describe('iphone-uploading sub router::', function() {
      before(function() {
        return browser.visit('http://example.com/uploading/iphone-uploading');
      });
      it('should access page successfully::', function() {
        browser.assert.success();
        return browser.assert.status(200);
      });
      //No Need This Time
      //console.log browser.html()
      it('has one textarea field and it has name attribute::', function() {
        browser.assert.elements('textarea[name]', 1);
        return browser.assert.attribute('textarea', 'name', /\w+/);
      });
      it('all input fields  has its name attribute::', function() {
        browser.assert.elements('input[name]', 2);
        return browser.assert.attribute('input', 'name', /\w+/);
      });
      return describe('submits form::', function() {
        before(function() {
          var thepath;
          
          // before() be resolved by mocha,and mocha executes from <project-root>
          thepath = fs.realpathSync('./package.json');
          browser.fill('textarea[name=specof]', 'formidable:A Node.js module for parsing form data,especially file uploads.\nThis module was developed for transloadit.com,a service forcused on uploading.');
          browser.attach('input[type="file"]', thepath);
          browser.check('input[name="ifenc"]');
          return browser.pressButton('Upload Now');
        });
        it('while fields full submit will cause redirect to new url::', function() {
          return browser.assert.redirected();
        });
        return it('new title "iphone-uploading-success" will occurs::', function() {
          return browser.assert.text('title', 'iphone-uploading-success');
        });
      });
    });
  });

}).call(this);
